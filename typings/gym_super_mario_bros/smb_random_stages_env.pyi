"""
This type stub file was generated by pyright.
"""

import gym

"""An OpenAI Gym Super Mario Bros. environment that randomly selects levels."""
class SuperMarioBrosRandomStagesEnv(gym.Env):
    """A Super Mario Bros. environment that randomly selects levels."""
    metadata = ...
    reward_range = ...
    observation_space = ...
    action_space = ...
    def __init__(self, rom_mode=..., stages=...) -> None:
        """
        Initialize a new Super Mario Bros environment.

        Args:
            rom_mode (str): the ROM mode to use when loading ROMs from disk
            stages (list): select stages at random from a specific subset

        Returns:
            None

        """
        ...
    
    @property
    def screen(self):
        """Return the screen from the underlying environment"""
        ...
    
    def seed(self, seed=...): # -> list[Unknown]:
        """
        Set the seed for this environment's random number generator.

        Returns:
            list<bigint>: Returns the list of seeds used in this env's random
              number generators. The first value in the list should be the
              "main" seed, or the value which a reproducer should pass to
              'seed'. Often, the main seed equals the provided 'seed', but
              this won't be true if seed=None, for example.

        """
        ...
    
    def reset(self, seed=..., options=..., return_info=...):
        """
        Reset the state of the environment and returns an initial observation.

        Args:
            seed (int): an optional random number seed for the next episode
            options (dict): An optional options for resetting the environment.
                Can include the key 'stages' to override the random set of
                stages to sample from.
            return_info (any): unused

        Returns:
            state (np.ndarray): next frame as a result of the given action

        """
        ...
    
    def step(self, action):
        """
        Run one frame of the NES and return the relevant observation data.

        Args:
            action (byte): the bitmap determining which buttons to press

        Returns:
            a tuple of:
            - state (np.ndarray): next frame as a result of the given action
            - reward (float) : amount of reward returned after given action
            - done (boolean): whether the episode has ended
            - info (dict): contains auxiliary diagnostic information

        """
        ...
    
    def close(self): # -> None:
        """Close the environment."""
        ...
    
    def render(self, mode=...): # -> None:
        """
        Render the environment.

        Args:
            mode (str): the mode to render with:
            - human: render to the current display
            - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
              representing RGB values for an x-by-y pixel image

        Returns:
            a numpy array if mode is 'rgb_array', None otherwise

        """
        ...
    
    def get_keys_to_action(self):
        """Return the dictionary of keyboard keys to actions."""
        ...
    
    def get_action_meanings(self):
        """Return the list of strings describing the action space actions."""
        ...
    


__all__ = [SuperMarioBrosRandomStagesEnv.__name__]
